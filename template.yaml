AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Flask-React Docker app to ECS (EC2), with Route53, EIP, S3, ECR, CloudFront, and CloudWatch. No NAT, ALB, or ASG.

Parameters:
  DomainName:
    Type: String
    Description: The Route53 domain name to use (e.g. example.com)
  HostedZoneId:
    Type: String
    Description: The Route53 Hosted Zone ID

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: turnkey-vpc

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: turnkey-public-subnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: turnkey-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: turnkey-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS/SSH from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: turnkey-ecs-sg

  S3ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'turnkey-config-${AWS::AccountId}-${AWS::Region}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: turnkey-app

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: turnkey-cluster

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref ECSRole]

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  ECSLaunchConfig:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: turnkey-task
      NetworkMode: bridge
      RequiresCompatibilities: [EC2]
      Cpu: '512'
      Memory: '1024'
      ExecutionRoleArn: !GetAtt ECSRole.Arn
      ContainerDefinitions:
        - Name: turnkey-app
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/turnkey-app:latest'
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
          Environment:
            - Name: CONFIG_PATH
              Value: /config/config.json
          MountPoints:
            - SourceVolume: config-volume
              ContainerPath: /config
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/turnkey-app
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Volumes:
        - Name: config-volume
          Host:
            SourcePath: /config

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      LaunchConfigurationName: !Ref ECSInstanceLaunchConfig
      Tags:
        - Key: Name
          Value: turnkey-ecs-instance
          PropagateAtLaunch: true

  ECSInstanceLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0c02fb55956c7d316 # Amazon Linux 2 ECS-optimized (update as needed)
      InstanceType: t3.medium
      AssociatePublicIpAddress: true
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "ECS_CLUSTER=${ECSCluster}" >> /etc/ecs/ecs.config
          mkdir -p /config
          aws s3 cp s3://${S3ConfigBucket}/config.json /config/config.json

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref ECSLaunchConfig
      LaunchType: EC2
      PlacementStrategies:
        - Type: binpack
          Field: memory

  Route53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      TTL: '300'
      ResourceRecords:
        - !Ref EIP

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: turnkey-origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
        Origins:
          - Id: turnkey-origin
            DomainName: !Ref DomainName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        DefaultRootObject: index.html
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/turnkey-app
      RetentionInDays: 14

Outputs:
  WebsiteURL:
    Description: The CloudFront URL for the app
    Value: !GetAtt CloudFrontDistribution.DomainName
  ECRRepoURI:
    Description: URI for ECR repo
    Value: !GetAtt ECRRepo.RepositoryUri
  S3ConfigBucketName:
    Description: S3 bucket for config.json
    Value: !Ref S3ConfigBucket
